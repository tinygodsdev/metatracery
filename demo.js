/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Tracery
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */

var tracery = require('./tracery.js');

console.log('üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Tracery\n');

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞
// ============================================================================
console.log('üìù –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞');

var simpleGrammar = tracery.createGrammar({
  'animal': ['cat', 'dog', 'bird', 'fish'],
  'emotion': ['happy', 'sad', 'angry', 'excited'],
  'origin': ['The #emotion# #animal# runs fast.']
});

console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞:');
for (var i = 0; i < 3; i++) {
  console.log('  ' + (i + 1) + '. ' + simpleGrammar.flatten('#origin#'));
}
console.log('');

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 2: –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
// ============================================================================
console.log('‚ú® –ü—Ä–∏–º–µ—Ä 2: –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏');

var modifierGrammar = tracery.createGrammar({
  'origin': ['#animal.a.capitalize# is #emotion#.'],
  'animal': ['cat', 'dog', 'elephant', 'unicorn'],
  'emotion': ['happy', 'sad', 'angry']
});

modifierGrammar.addModifiers(tracery.baseEngModifiers);

console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏:');
for (var i = 0; i < 3; i++) {
  console.log('  ' + (i + 1) + '. ' + modifierGrammar.flatten('#origin#'));
}
console.log('');

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 3: –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
// ============================================================================
console.log('üé¨ –ü—Ä–∏–º–µ—Ä 3: –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏');

var actionGrammar = tracery.createGrammar({
  'origin': ['[name:Alice][mood:happy]#story#'],
  'story': ['#name# is feeling #mood# today. She #action#.'],
  'action': ['goes for a walk', 'reads a book', 'calls her friend']
});

console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏:');
for (var i = 0; i < 3; i++) {
  console.log('  ' + (i + 1) + '. ' + actionGrammar.flatten('#origin#'));
}
console.log('');

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 4: –°–ª–æ–∂–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–π
// ============================================================================
console.log('üìö –ü—Ä–∏–º–µ—Ä 4: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–π');

var storyGrammar = tracery.createGrammar({
  'origin': ['#beginning# #middle# #ending#'],
  'beginning': [
    'Once upon a time, there was #character#.',
    'In a land far away, #character# lived.',
    'Long ago, #character# was born.'
  ],
  'character': [
    '#name# the #title#',
    'a #adjective# #profession#'
  ],
  'name': ['Alice', 'Bob', 'Charlie', 'Diana'],
  'title': ['brave knight', 'wise wizard', 'clever thief', 'beautiful princess'],
  'adjective': ['brave', 'wise', 'clever', 'mysterious', 'powerful'],
  'profession': ['warrior', 'mage', 'rogue', 'healer', 'archer'],
  'middle': [
    '#character# went on a quest to #goal#.',
    '#character# discovered #discovery#.',
    '#character# met #companion# and together they #adventure#.'
  ],
  'goal': ['find treasure', 'save the princess', 'defeat the dragon', 'restore peace'],
  'discovery': ['an ancient artifact', 'a hidden cave', 'a magical spell', 'a secret passage'],
  'companion': ['a talking cat', 'a wise owl', 'a brave knight', 'a magical fairy'],
  'adventure': ['explored the forest', 'climbed the mountain', 'crossed the river', 'entered the castle'],
  'ending': [
    'And they lived happily ever after.',
    'The adventure was just beginning.',
    'From that day forward, #character# was known as a hero.'
  ]
});

storyGrammar.addModifiers(tracery.baseEngModifiers);

console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 2 –∏—Å—Ç–æ—Ä–∏–∏:');
for (var i = 0; i < 2; i++) {
  console.log('\n–ò—Å—Ç–æ—Ä–∏—è ' + (i + 1) + ':');
  console.log(storyGrammar.flatten('#origin#'));
}
console.log('');

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 5: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
// ============================================================================
console.log('üéØ –ü—Ä–∏–º–µ—Ä 5: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è');

// Seeded random number generator
function seededRandom(seed) {
  return function() {
    seed = (seed * 9301 + 49297) % 233280;
    return seed / 233280;
  };
}

var detGrammar = tracery.createGrammar({
  'origin': ['#animal# is #color#'],
  'animal': ['cat', 'dog', 'bird', 'fish'],
  'color': ['red', 'blue', 'green', 'yellow']
});

console.log('–° –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º seed (12345):');
tracery.setRng(seededRandom(12345));
for (var i = 0; i < 3; i++) {
  console.log('  ' + (i + 1) + '. ' + detGrammar.flatten('#origin#'));
}

console.log('\n–° –¥—Ä—É–≥–∏–º seed (54321):');
tracery.setRng(seededRandom(54321));
for (var i = 0; i < 3; i++) {
  console.log('  ' + (i + 1) + '. ' + detGrammar.flatten('#origin#'));
}
console.log('');

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
// ============================================================================
console.log('üîß –ü—Ä–∏–º–µ—Ä 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã');

var customModifiers = {
  'shout': function(s) {
    return s.toUpperCase() + '!';
  },
  'whisper': function(s) {
    return s.toLowerCase() + '...';
  },
  'repeat': function(s, params) {
    var count = parseInt(params[0]) || 2;
    return s.repeat(count);
  }
};

var customGrammar = tracery.createGrammar({
  'origin': ['#text.shout#', '#text.whisper#', '#text.repeat(3)#'],
  'text': ['hello world']
});

customGrammar.addModifiers(customModifiers);

console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏:');
for (var i = 0; i < 3; i++) {
  console.log('  ' + (i + 1) + '. ' + customGrammar.flatten('#origin#'));
}
console.log('');

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
// ============================================================================
console.log('‚ö†Ô∏è  –ü—Ä–∏–º–µ—Ä 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');

var errorGrammar = tracery.createGrammar({
  'origin': ['#existingSymbol# #missingSymbol#'],
  'existingSymbol': ['Hello']
});

var errorResult = errorGrammar.flatten('#origin#');
console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º —Å–∏–º–≤–æ–ª–æ–º:');
console.log('  "' + errorResult + '"');
console.log('');

// ============================================================================
// –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
// ============================================================================
console.log('üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('');
console.log('üìã –ü–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
console.log('‚úì –ë–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∞–≤–∏–ª–∞');
console.log('‚úì –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (capitalize, a/an, s, replace)');
console.log('‚úì –î–µ–π—Å—Ç–≤–∏—è (push/pop)');
console.log('‚úì –°–ª–æ–∂–Ω—ã–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏');
console.log('‚úì –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è');
console.log('‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã');
console.log('‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
console.log('');
console.log('üöÄ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Tracery –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º!');
