/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Tracery
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
 */

var tracery = require('./tracery.js');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function seededRandom(seed) {
  return function() {
    seed = (seed * 9301 + 49297) % 233280;
    return seed / 233280;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function assert(condition, message) {
  if (!condition) {
    throw new Error('Assertion failed: ' + message);
  }
  console.log('‚úì ' + message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–∏–Ω –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
function assertContains(result, expectedOptions, message) {
  var found = expectedOptions.some(function(option) {
    return result === option;
  });
  if (!found) {
    throw new Error('Assertion failed: ' + message + 
                   '\nExpected one of: ' + expectedOptions.join(', ') + 
                   '\nGot: ' + result);
  }
  console.log('‚úì ' + message);
}

console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Tracery...\n');

// ============================================================================
// –¢–ï–°–¢ 1: –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏');

var grammar = tracery.createGrammar({
  'animal': ['cat', 'dog', 'bird'],
  'origin': ['The #animal# is cute.']
});

var result = grammar.flatten('#origin#');
var expectedOptions = [
  'The cat is cute.',
  'The dog is cute.',
  'The bird is cute.'
];
assertContains(result, expectedOptions, '–ë–∞–∑–æ–≤–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–Ω—ã–π
assert(typeof result === 'string', '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
assert(result.length > 0, '–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º');

console.log('');

// ============================================================================
// –¢–ï–°–¢ 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞');

var multiGrammar = tracery.createGrammar({
  'sentence': [
    '#subject# #verb# #object#.',
    '#object# is #adjective#.',
    '#subject# and #object# are friends.'
  ],
  'subject': ['The cat', 'The dog'],
  'verb': ['chases', 'loves'],
  'object': ['the mouse', 'the ball'],
  'adjective': ['cute', 'playful'],
  'origin': ['#sentence#']
});

var multiResult = multiGrammar.flatten('#origin#');
assert(typeof multiResult === 'string', '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç–∞—é—Ç');
assert(multiResult.length > 0, '–†–µ–∑—É–ª—å—Ç–∞—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –Ω–µ –ø—É—Å—Ç–æ–π');

console.log('');

// ============================================================================
// –¢–ï–°–¢ 3: –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 3: –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã');

var modifierGrammar = tracery.createGrammar({
  'origin': ['#text.capitalize#'],
  'text': ['hello world']
});

modifierGrammar.addModifiers(tracery.baseEngModifiers);

var capitalizeResult = modifierGrammar.flatten('#origin#');
assert(capitalizeResult === 'Hello world', '–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä capitalize —Ä–∞–±–æ—Ç–∞–µ—Ç');

// –¢–µ—Å—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ a/an
var articleGrammar = tracery.createGrammar({
  'origin': ['#noun.a#'],
  'noun': ['cat', 'elephant', 'unicorn']
});

articleGrammar.addModifiers(tracery.baseEngModifiers);

var articleResult = articleGrammar.flatten('#origin#');
var articleOptions = ['a cat', 'an elephant', 'a unicorn'];
assertContains(articleResult, articleOptions, '–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä a/an —Ä–∞–±–æ—Ç–∞–µ—Ç');

// –¢–µ—Å—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
var pluralGrammar = tracery.createGrammar({
  'origin': ['#noun.s#'],
  'noun': ['cat', 'dog', 'bird', 'fish']
});

pluralGrammar.addModifiers(tracery.baseEngModifiers);

var pluralResult = pluralGrammar.flatten('#origin#');
var pluralOptions = ['cats', 'dogs', 'birds', 'fishes'];
assertContains(pluralResult, pluralOptions, '–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');

// –¢–µ—Å—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ replace
var replaceGrammar = tracery.createGrammar({
  'origin': ['#text.replace(old,new)#'],
  'text': ['The old cat is old']
});

replaceGrammar.addModifiers(tracery.baseEngModifiers);

var replaceResult = replaceGrammar.flatten('#origin#');
assert(replaceResult === 'The new cat is new', '–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä replace —Ä–∞–±–æ—Ç–∞–µ—Ç');

console.log('');

// ============================================================================
// –¢–ï–°–¢ 4: –î–µ–π—Å—Ç–≤–∏—è (Actions)
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 4: –î–µ–π—Å—Ç–≤–∏—è (Actions)');

// –¢–µ—Å—Ç push –¥–µ–π—Å—Ç–≤–∏—è
var pushGrammar = tracery.createGrammar({
  'origin': ['[name:Alice]#greeting#'],
  'greeting': ['Hello, #name#!']
});

var pushResult = pushGrammar.flatten('#origin#');
assert(pushResult === 'Hello, Alice!', 'Push –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');

// –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö push –¥–µ–π—Å—Ç–≤–∏–π
var multiPushGrammar = tracery.createGrammar({
  'origin': ['[name:Alice][mood:happy]#story#'],
  'story': ['#name# is feeling #mood# today.']
});

var multiPushResult = multiPushGrammar.flatten('#origin#');
assert(multiPushResult === 'Alice is feeling happy today.', '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ push –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç');

// –¢–µ—Å—Ç pop –¥–µ–π—Å—Ç–≤–∏—è
var popGrammar = tracery.createGrammar({
  'origin': ['[name:Alice]#greeting#[name:POP]#farewell#'],
  'greeting': ['Hello, #name#! '],
  'farewell': ['Goodbye!']
});

var popResult = popGrammar.flatten('#origin#');
assert(popResult === 'Hello, Alice! Goodbye!', 'Pop –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');

console.log('');

// ============================================================================
// –¢–ï–°–¢ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');

var errorGrammar = tracery.createGrammar({
  'origin': ['#existingSymbol# #missingSymbol#'],
  'existingSymbol': ['Hello']
});

var errorResult = errorGrammar.flatten('#origin#');
assert(errorResult === 'Hello ((missingSymbol))', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
// (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ ((symbol)))
var errorNode = errorGrammar.expand('#origin#');
assert(Array.isArray(errorNode.errors), '–û—à–∏–±–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤');
// –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —á—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
assert(errorResult.includes('((missingSymbol))'), '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

console.log('');

// ============================================================================
// –¢–ï–°–¢ 6: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 6: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è');

var detGrammar = tracery.createGrammar({
  'origin': ['#animal# is #color#'],
  'animal': ['cat', 'dog', 'bird', 'fish'],
  'color': ['red', 'blue', 'green', 'yellow']
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
tracery.setRng(seededRandom(12345));

var detResult1 = detGrammar.flatten('#origin#');
var detResult2 = detGrammar.flatten('#origin#');

// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
tracery.setRng(seededRandom(12345));
var detResult3 = detGrammar.flatten('#origin#');

assert(detResult1 === detResult3, '–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
assert(typeof detResult1 === 'string', '–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å—Ç—Ä–æ–∫–∞');

console.log('');

// ============================================================================
// –¢–ï–°–¢ 7: –°–ª–æ–∂–Ω—ã–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 7: –°–ª–æ–∂–Ω—ã–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏');

var complexGrammar = tracery.createGrammar({
  'origin': ['#story#'],
  'story': ['#beginning# #middle# #ending#'],
  'beginning': ['Once upon a time, there was #character#.'],
  'character': ['#name# the #title#'],
  'name': ['Alice', 'Bob'],
  'title': ['brave knight', 'wise wizard'],
  'middle': ['#character# went on a quest.'],
  'ending': ['The end.']
});

complexGrammar.addModifiers(tracery.baseEngModifiers);

var complexResult = complexGrammar.flatten('#origin#');
assert(typeof complexResult === 'string', '–°–ª–æ–∂–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
assert(complexResult.includes('Once upon a time'), '–°–ª–æ–∂–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç');
assert(complexResult.includes('The end.'), '–°–ª–æ–∂–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');

console.log('');

// ============================================================================
// –¢–ï–°–¢ 8: –¶–µ–ø–æ—á–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 8: –¶–µ–ø–æ—á–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤');

var chainGrammar = tracery.createGrammar({
  'origin': ['#animal.a.capitalize# is cute.'],
  'animal': ['cat', 'elephant']
});

chainGrammar.addModifiers(tracery.baseEngModifiers);

var chainResult = chainGrammar.flatten('#origin#');
var chainOptions = ['A cat is cute.', 'An elephant is cute.'];
assertContains(chainResult, chainOptions, '–¶–µ–ø–æ—á–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç');

console.log('');

// ============================================================================
// –¢–ï–°–¢ 9: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 9: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã');

var customModifiers = {
  'shout': function(s) {
    return s.toUpperCase() + '!';
  },
  'whisper': function(s) {
    return s.toLowerCase() + '...';
  }
};

var customGrammar = tracery.createGrammar({
  'origin': ['#text.shout#'],
  'text': ['hello world']
});

customGrammar.addModifiers(customModifiers);

var customResult = customGrammar.flatten('#origin#');
assert(customResult === 'HELLO WORLD!', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç');

console.log('');

// ============================================================================
// –¢–ï–°–¢ 10: API –º–µ—Ç–æ–¥—ã
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 10: API –º–µ—Ç–æ–¥—ã');

// –¢–µ—Å—Ç createGrammar
var apiGrammar = tracery.createGrammar({
  'test': ['value']
});
assert(apiGrammar !== null, 'createGrammar —Å–æ–∑–¥–∞–µ—Ç –≥—Ä–∞–º–º–∞—Ç–∏–∫—É');

// –¢–µ—Å—Ç expand vs flatten
var expandNode = apiGrammar.expand('#test#');
var flattenResult = apiGrammar.flatten('#test#');

assert(expandNode !== null, 'expand –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∑–µ–ª');
assert(flattenResult === 'value', 'flatten –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É');

// –¢–µ—Å—Ç toJSON
var jsonResult = apiGrammar.toJSON();
assert(typeof jsonResult === 'string', 'toJSON –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É');
assert(jsonResult.includes('test'), 'toJSON —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–º–≤–æ–ª—ã');

console.log('');

// ============================================================================
// –¢–ï–°–¢ 11: –ü–∞—Ä—Å–∏–Ω–≥
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 11: –ü–∞—Ä—Å–∏–Ω–≥');

// –¢–µ—Å—Ç parse
var parsed = tracery.parse('Text #symbol# more text');
assert(Array.isArray(parsed), 'parse –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤');
assert(parsed.length > 0, 'parse –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');

// –¢–µ—Å—Ç parseTag
var tagParsed = tracery.parseTag('symbol.modifier1.modifier2');
assert(tagParsed.symbol === 'symbol', 'parseTag –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–º–≤–æ–ª');
assert(Array.isArray(tagParsed.modifiers), 'parseTag –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã');

console.log('');

// ============================================================================
// –¢–ï–°–¢ 12: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 12: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º');

var stateGrammar = tracery.createGrammar({
  'origin': ['#counter# #counter# #counter#'],
  'counter': ['1', '2', '3']
});

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
var results = [];
for (var i = 0; i < 5; i++) {
  results.push(stateGrammar.flatten('#origin#'));
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
results.forEach(function(result, index) {
  assert(typeof result === 'string', '–†–µ–∑—É–ª—å—Ç–∞—Ç ' + (index + 1) + ' –≤–∞–ª–∏–¥–µ–Ω');
  assert(result.length > 0, '–†–µ–∑—É–ª—å—Ç–∞—Ç ' + (index + 1) + ' –Ω–µ –ø—É—Å—Ç–æ–π');
});

console.log('');

// ============================================================================
// –¢–ï–°–¢ 13: Edge cases
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 13: Edge cases');

// –ü—É—Å—Ç–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞
var emptyGrammar = tracery.createGrammar({});
var emptyResult = emptyGrammar.flatten('#missing#');
assert(emptyResult === '((missing))', '–ü—É—Å—Ç–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

// –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å –ø—É—Å—Ç—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
var emptyRulesGrammar = tracery.createGrammar({
  'origin': [''],
  'test': ['#origin#']
});
var emptyRulesResult = emptyRulesGrammar.flatten('#test#');
assert(emptyRulesResult === '', '–ü—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

console.log('');

// ============================================================================
// –¢–ï–°–¢ 14: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
// ============================================================================
console.log('üìã –¢–µ—Å—Ç 14: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');

var perfGrammar = tracery.createGrammar({
  'origin': ['#sentence#'],
  'sentence': ['#word# #word# #word# #word# #word#'],
  'word': ['hello', 'world', 'test', 'performance', 'check']
});

var startTime = Date.now();
for (var i = 0; i < 100; i++) {
  perfGrammar.flatten('#origin#');
}
var endTime = Date.now();

var duration = endTime - startTime;
assert(duration < 1000, '100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É');

console.log('');

// ============================================================================
// –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
// ============================================================================
console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
console.log('');
console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
console.log('‚úì –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
console.log('‚úì –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç–∞—é—Ç');
console.log('‚úì –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
console.log('‚úì –î–µ–π—Å—Ç–≤–∏—è (push/pop) —Ä–∞–±–æ—Ç–∞—é—Ç');
console.log('‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç');
console.log('‚úì –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
console.log('‚úì –°–ª–æ–∂–Ω—ã–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
console.log('‚úì –¶–µ–ø–æ—á–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç');
console.log('‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
console.log('‚úì API –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
console.log('‚úì –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç');
console.log('‚úì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç');
console.log('‚úì Edge cases –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
console.log('‚úì –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è');
console.log('');
console.log('üöÄ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Tracery –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
